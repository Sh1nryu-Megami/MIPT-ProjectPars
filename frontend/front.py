import telebot
from telebot import types
import requests
from io import BytesIO
import f_const

bot = telebot.TeleBot(f_const.TOKEN)


def get_dishes_types():
   response_types = requests.get(f'{f_const.backend_url}/select_all_dishes_types')
   all_dishes_types = response_types.json()	
   return all_dishes_types

def get_dishes_names():
   response_names = requests.get(f'{f_const.backend_url}/select_all_dishes_names')
   all_dishes_names = response_names.json()	
   return all_dishes_names


def get_all_no_ingredient(message):
    selected_entity = message
    responce_entity = requests.get(f'{f_const.backend_url}/select_all_entity/{selected_entity}')
    try:
        entity = responce_entity.json()
    except:
        entity = None
    return entity

def get_no_ingredient(message, selected_type):
    selected_entity = message
    responce_entity = requests.get(f'{f_const.backend_url}/select_entity/{selected_entity}/{selected_type}')
    try:
        entity = responce_entity.json()
    except:
        entity = None
    return entity

def check_dishes_types(message):
   all_dishes_types = get_dishes_types()
   return message.text in all_dishes_types or message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –±–ª—é–¥."
   
def check_dishes_names(message):
   all_dishes_names = get_dishes_names()
   return message.text in all_dishes_names or message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –±–ª—é–¥–∞."

   
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    poz_btn = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∏—Ü–∏–∏.")
    markup.add(poz_btn)
    text = "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –Å–±–∏—Å–∞–Ω. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –±–ª—é–¥–∞–º–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è."
    bot.send_message(message.from_user.id, text, reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∏—Ü–∏–∏.'
                                          or message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–æ–∑–∏—Ü–∏–π.')
def show_types(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    all_dishes_types = get_dishes_types()
    for dish_type in all_dishes_types:
        btn = types.KeyboardButton(dish_type)
        markup.add(btn)
    btn = types.KeyboardButton("–í—Å–µ –±–ª—é–¥–∞ –±–µ–∑ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞")
    markup.add(btn)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–ª—é–¥–∞:", reply_markup=markup)


   
@bot.message_handler(func=lambda message: message.text == '–í—Å–µ –±–ª—é–¥–∞ –±–µ–∑ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞')
def ask_all_for_entity(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç:")
    bot.register_next_step_handler(msg, send_all_dishes_without_entity)


def send_all_dishes_without_entity(message):
    entity = message.text
    data = get_all_no_ingredient(entity)
    if data:
        dishes_info = ""
        id = 1
        dishes_info += f"–°–ª–µ–¥—É—é—â–∏–µ –±–ª—é–¥–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏—Ö –≤ –º–µ–Ω—é –∫–Ω–æ–ø–∫–∞–º–∏:\n\n"
        for dish in data:
            dish_type, dish_name, dish_grams, dish_price = dish
            dishes_info += f"‚Ññ{id} –¢–∏–ø –±–ª—é–¥–∞: {dish_type} –ù–∞–∑–≤–∞–Ω–∏–µ: '{dish_name}' –¶–µ–Ω–∞: {dish_price}\n"
            if id % 10 == 0:
                bot.send_message(message.chat.id, dishes_info)
                dishes_info = ""
            id += 1
        if dishes_info:
            bot.send_message(message.chat.id, dishes_info)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –±–ª—é–¥ –±–µ–∑ —ç—Ç–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞.")

@bot.message_handler(func=check_dishes_types)
def show_positions(message):
    global selected_type
    selected_type = message.text
    response = requests.get(f'{f_const.backend_url}/select_selected_type/{selected_type}')
    positions = response.json()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for position in positions:
        btn = types.KeyboardButton(position)
        markup.add(btn)
    btn = types.KeyboardButton('–ë–µ–∑ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞.')
    markup.add(btn)
    btn = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–æ–∑–∏—Ü–∏–π.')
    markup.add(btn)
    response_names = requests.get(f'{f_const.backend_url}/select_all_dishes_names')
    all_dishes_names = response_names.json()
    bot.send_message(message.from_user.id, f'–ë–ª—é–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{selected_type}":', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '–ë–µ–∑ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞.')
def ask_for_entity(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç:")
    bot.register_next_step_handler(msg, send_dishes_without_entity)


def send_dishes_without_entity(message):
    entity = message.text
    data = get_no_ingredient(entity, selected_type)
    if data:
        dishes_info = ""
        id = 1
        dishes_info += f"–°–ª–µ–¥—É—é—â–∏–µ –±–ª—é–¥–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏—Ö –≤ –º–µ–Ω—é –∫–Ω–æ–ø–∫–∞–º–∏:\n\n"
        for dish in data:
            dish_type, dish_name, dish_grams, dish_price = dish
            dishes_info += f"‚Ññ{id} –¢–∏–ø –±–ª—é–¥–∞: {dish_type} –ù–∞–∑–≤–∞–Ω–∏–µ: '{dish_name}' –¶–µ–Ω–∞: {dish_price}\n"
            if id % 10 == 0:
                bot.send_message(message.chat.id, dishes_info)
                dishes_info = ""
            id += 1
        if dishes_info:
            bot.send_message(message.chat.id, dishes_info)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –±–ª—é–¥ –±–µ–∑ —ç—Ç–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞.")



@bot.message_handler(func=check_dishes_names)
def about_position(message):
    selected_dish = message.text
    response = requests.get(f'{f_const.backend_url}/select_about_dish/{selected_dish}')
    position_info = response.json()[0]
    dish_details, dish_grams, dish_price, dish_image = position_info
    response = requests.get(dish_image)
    response.raise_for_status()
    try:
        response_text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª—é–¥–µ '{selected_dish}':\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {dish_details}\n\n"
        response_text += f"–í–µ—Å: {dish_grams}\n–¶–µ–Ω–∞: {dish_price}"
        image_data = BytesIO(response.content)
        bot.send_photo(message.from_user.id, photo=image_data, caption=response_text)
    except:
        response_text = f"""–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ç –Ω–∞—Å—Ç–æ–ª—å–∫–æ –æ–≥—Ä–æ–º–Ω—ã–π, —á—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–µ –¥–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ... 
                            –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —Å–µ—Ç–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ –Å–±–∏—Å–∞–Ω!"""
        image_data = BytesIO(response.content)
        bot.send_photo(message.from_user.id, photo=image_data, caption=response_text)


bot.polling(none_stop=True)
